public class Files {
























































	public static void write(String path, Object obj) {
		if (null == path || null == obj)
			return;
		try {
			write(Files.createFileIfNoExists(path), obj);
		} catch (IOException e) {
			throw Lang.wrapThrow(e);
		}
	}
















	public static void write(File f, Object obj) {
		if (null == f || null == obj)
			return;
		if (f.isDirectory())
			throw Lang.makeThrow("Directory '%s' can not be write as File", f);

		try {
			// 保证文件存在
			if (!f.exists())
				Files.createNewFile(f);
			// 输入流
			if (obj instanceof InputStream) {
				Streams.writeAndClose(Streams.fileOut(f), (InputStream) obj);
			}
			// 字节数组
			else if (obj instanceof byte[]) {
				Streams.writeAndClose(Streams.fileOut(f), (byte[]) obj);
			}
			// 文本输入流
			else if (obj instanceof Reader) {
				Streams.writeAndClose(Streams.fileOutw(f), (Reader) obj);
			}
			// 其他对象
			else {
				Streams.writeAndClose(Streams.fileOutw(f), obj.toString());
			}
		} catch (IOException e) {
			throw Lang.wrapThrow(e);
		}
	}





































































































































































































































































































































	public static boolean createNewFile(File f) throws IOException {
		if (null == f || f.exists())
			return false;
		makeDir(f.getParentFile());
		return f.createNewFile();
	}






















	public static boolean deleteDir(File dir) {
		if (null == dir || !dir.exists())
			return false;
		if (!dir.isDirectory())
			throw new RuntimeException("\"" + dir.getAbsolutePath()
					+ "\" should be a directory!");
		File[] files = dir.listFiles();
		boolean re = false;
		if (null != files) {
			if (files.length == 0)
				return dir.delete();
			for (File f : files) {
				if (f.isDirectory())
					re |= deleteDir(f);
				else
					re |= deleteFile(f);
			}
			re |= dir.delete();
		}
		return re;
	}
















































































































































































































































































































	public static File[] scanFiles(File rootDir) {
		return scanFiles(rootDir, null);
	}








	public static File[] scanFiles(File rootDir, FileFilter filter) {
		ArrayList<File> dirList = new ArrayList<File>();
		scanDirs(rootDir, dirList);

		LinkedList<File> fileList = new LinkedList<File>();
		for (File dir : dirList) {
			// 如果FileFilter为空，则listFiles会返回所有的文件
			for (File file : dir.listFiles(filter)) {
				if (file.isFile())
					fileList.add(file);
			}
		}
		for(File file:rootDir.listFiles(filter))
		{
			if(file.isFile())
				fileList.add(file);
		}
		return fileList.toArray(new File[fileList.size()]);
	}
















































































































































































































































































































































	public static long size(File file)
	{
		if(null==file) return 0;
		if(file.isFile()) return file.length();
		if(!file.exists()) return -1;
		long size=0;
		for(File aFile : scanFiles(file))//directory
		{
			size+=aFile.length();
		}
		return size;
	}
}
