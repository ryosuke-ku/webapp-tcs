public class Floppycontroller {
















































































































































































































































































































            public int read(int position) {
                return isDiskImageMounted() ? readInternal(getPositionIndex(position)) : 0;
            }













            public void write(int position, int value) {
                if (isDiskImageMounted()) {
                    writeInternal(getPositionIndex(position), value);
                }
            }












































































































































































































































































        int readCurrentTrackData(int position) {
            return currentTrackData[position].read(position);
        }
        /**













        boolean isCurrentTrackDataMarkerPosition(int position) {
            return currentTrackData[position].isMarkerPosition(position);
        }






        boolean isCurrentTrackDataCrcPosition(int position) {
            return currentTrackData[position].isCrcPosition(position);
        }





        FloppyDriveSide getCurrentTrackSide() {
            return currentTrackSide;
        }





        int getCurrentTrackNumber() {
            return currentTrackNumber;
        }






        void setCurrentTrack(int trackNumber, FloppyDriveSide trackSide) {
            if (isDebugEnabled) {
                d(TAG, "set track: " + trackNumber + ", side: " + trackSide);
            }
            this.currentTrackNumber = trackNumber;
            this.currentTrackSide = trackSide;
            // OnFloppyDriveTrackChanged listeners notify if disk image mounted
            if (isDiskImageMounted()) {
                for (OnFloppyDriveTrackChanged listener : trackChangedListeners) {
                    listener.onFloppyDriveTrackChanged(trackNumber, trackSide);
                }
            }
        }







        int getNextTrackNumber(boolean isStepToCenter) {
            return Math.max(Math.min((getCurrentTrackNumber() + (isStepToCenter ? 1 : -1)),
                    TRACKS_PER_DISK - 1), 0);
        }






































        void mountDiskImage(String diskImageFileUri, boolean isReadOnly) throws Exception {
            File diskImageFile = new File(new URI(diskImageFileUri));
            // Check disk image size
            if (diskImageFile.length() != BYTES_PER_DISK) {
                throw new IllegalArgumentException("Invalid disk image size: " +
                            diskImageFile.length());
            }
            if (isDiskImageMounted()) {
                unmountDiskImage();
            }
            isMountedDiskImageReadOnly = isReadOnly;
            mountedDiskImageFile = new RandomAccessFile(diskImageFile, isReadOnly ? "r" : "rw");
            mountedDiskImageBuffer = mountedDiskImageFile.getChannel().map(isReadOnly
                    ? FileChannel.MapMode.READ_ONLY : FileChannel.MapMode.READ_WRITE,
                            0, BYTES_PER_DISK);
            this.mountedDiskImageFileUri = diskImageFileUri;
            // Reload track data
            setCurrentTrack(getCurrentTrackNumber(), getCurrentTrackSide());
        }
































    protected static void d(String tag, String message) {
        System.out.println("FDD: " + message);
    }

    protected FloppyDrive getFloppyDrive(FloppyDriveIdentifier drive) {
        return (drive != null) ? floppyDrives[drive.ordinal()] : null;
    }







    public synchronized void init(long cpuTime) {
        writeControlRegister(cpuTime, 0);
    }







































































    public synchronized int read(long cpuTime, int address) {
        setLastAccessCpuTime(cpuTime);
        return (address == CONTROL_REGISTER_ADDRESS)
                ? readControlRegister(cpuTime)
                : readDataRegister(cpuTime);
    }


    public synchronized boolean write(long cpuTime, boolean isByteMode, int address, int value) {
        if (isDebugEnabled) {
            d(TAG, "write: " + Integer.toOctalString(address) +
                    ", value: " + Integer.toOctalString(value) + ", isByteMode: " + isByteMode);
        }
        setLastAccessCpuTime(cpuTime);
        if (!isByteMode) {
            if (address == CONTROL_REGISTER_ADDRESS) {
                writeControlRegister(cpuTime, value);
            } else {
                writeDataRegister(cpuTime, value);
            }
        }
        return true;
    }


































































































































































































































    public synchronized void mountDiskImage(String diskImageFileUri, FloppyDriveIdentifier drive,
            boolean isReadOnly) throws Exception {
        getFloppyDrive(drive).mountDiskImage(diskImageFileUri, isReadOnly);
    }

































































































}
