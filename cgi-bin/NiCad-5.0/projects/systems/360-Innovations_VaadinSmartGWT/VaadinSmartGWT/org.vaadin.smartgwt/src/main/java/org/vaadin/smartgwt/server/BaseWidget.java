public class Basewidget {



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































	public void setAttribute(String attribute, Object value, boolean allowPostCreate)
	{
		if (isCreated() && !allowPostCreate)
		{
			throw new IllegalArgumentException("Cannot modify property " + attribute + " once created");
		}

		if (value == null)
			attributes.remove(attribute);
		else
			attributes.put(attribute, value);
	}







	public void setAttribute(String attribute, Object value)
	{
		setAttribute(attribute, value, true);
	}





















































































































































































	public void paintContent(PaintTarget target) throws PaintException
	{
		JsonPaintTarget jspt = (JsonPaintTarget) target;

		// if (jspt.needsToBePainted(this) == false && (this instanceof MasterContainer == false))
		// return;

		for (Map.Entry<String, Object> entry : attributes.entrySet())
		{
			Object value = entry.getValue();
			String name = entry.getKey();

			if (name.length() >= 2 && name.charAt(1) == '$') {
				switch (name.charAt(0)) {
				case 'b':
					target.addAttribute(name, (Boolean) value);
					break;
				}

				break;
			}

			if (value == null)
			{
				logPaintContentAttribute(name, null);
				target.addAttribute(name, "null");
			}
			else if (value instanceof Boolean)
			{
				logPaintContentAttribute(name, value);
				target.addAttribute(name, "b" + String.valueOf(value));
			}
			else if (value instanceof Integer)
			{
				logPaintContentAttribute(name, value);
				target.addAttribute(name, "i" + String.valueOf(value));
			}
			else if (value instanceof Float)
			{
				logPaintContentAttribute(name, value);
				target.addAttribute(name, "f" + String.valueOf(value));
			}
			else if (value instanceof Long)
			{
				logPaintContentAttribute(name, value);
				target.addAttribute(name, "l" + String.valueOf(value));
			}
			else if (value instanceof Double)
			{
				logPaintContentAttribute(name, value);
				target.addAttribute(name, "d" + String.valueOf(value));
			}
			else if (value instanceof String)
			{
				logPaintContentAttribute(name, value);
				target.addAttribute(name, "s" + String.valueOf(value));
			}
			else if (value instanceof String[])
			{
				logPaintContentAttribute(name, value);

				if (name.charAt(0) != '*')
					name = "!" + name;

				target.addAttribute(name, (String[]) value);
			}
			else if (value instanceof Record[])
			{
				try
				{
					String json = JSONHelper.getJsonString((Record[]) value);
					target.addAttribute(name, "j" + json);

				}
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
			else if (value instanceof Paintable[])
			{
				logPaintContentAttribute(name, value);
				List<String> references = new ArrayList<String>();

				for (Paintable p : (Paintable[]) value)
				{
					if (jspt.needsToBePainted(p))
						p.paint(target);

					references.add(jspt.getPaintIdentifier(p));
				}

				if (name.charAt(0) != '*')
					name = "[" + name;

				target.addAttribute(name, references.toArray()); // [ = array
			}
			else if (value instanceof Paintable)
			{
				logPaintContentAttribute(name, value);
				String ref = jspt.getPaintIdentifier((Paintable) value);

				if (jspt.needsToBePainted((Paintable) value))
					((Paintable) value).paint(target);

				if (name.charAt(0) != '*')
					name = "#" + name;

				target.addAttribute(name, ref); // # = reference
			}
		}

		// Since the paint is finished, set the created attribute
		isCreated = true;
	}




























































}
